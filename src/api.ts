const API = "https://dummyjson.com";
export interface User { id?: number; firstName?: string; username: string; password?: string; }
export interface Recipe { id?: number; name: string; image?: string; cuisine?: string; ingredients?: string[]; tags?: string[]; rating?: number; reviewCount?: number; difficulty?: string; prepTimeMinutes?: number; cookTimeMinutes?: number; servings?: number; caloriesPerServing?: number; instructions?: string[]; }
async function fetchWithTimeout(url: string, opt: RequestInit = {}, ms = 10000): Promise<Response> { const ctl = new AbortController(); const t = setTimeout(() => ctl.abort(), ms); try { return await fetch(url, { ...opt, signal: ctl.signal }); } finally { clearTimeout(t); } }
export async function getUsers(): Promise<User[]>{ const res = await fetch("./data/users.json"); if (!res.ok) throw new Error("users.json tidak ditemukan"); const data = await res.json(); return (data.users ?? []) as User[]; }
export async function getRecipes(): Promise<Recipe[]>{ try { const res = await fetchWithTimeout(`${API}/recipes?limit=100`); if (!res.ok) throw new Error("recipes api failed"); const data = await res.json(); return (data.recipes ?? []) as Recipe[]; } catch { const res = await fetch("./data/recipes.json"); if (!res.ok) throw new Error("fallback recipes.json not found"); const data = await res.json(); return (data.recipes ?? data) as Recipe[]; } }
